class Attendance < ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[Attendance, ActiveRecord_Relation, Integer]

  attr_accessor id(): Integer
  def id_changed?: () -> bool
  def id_change: () -> [ Integer?, Integer? ]
  def id_will_change!: () -> void
  def id_was: () -> Integer?
  def id_previously_changed?: () -> bool
  def id_previous_change: () -> Array[Integer?]?
  def id_previously_was: () -> Integer?
  def id_before_last_save: () -> Integer?
  def id_change_to_be_saved: () -> Array[Integer?]?
  def id_in_database: () -> Integer?
  def saved_change_to_id: () -> Array[Integer?]?
  def saved_change_to_id?: () -> bool
  def will_save_change_to_id?: () -> bool
  def restore_id!: () -> void
  def clear_id_change: () -> void

  attr_accessor work_date(): Date
  def work_date_changed?: () -> bool
  def work_date_change: () -> [ Date?, Date? ]
  def work_date_will_change!: () -> void
  def work_date_was: () -> Date?
  def work_date_previously_changed?: () -> bool
  def work_date_previous_change: () -> Array[Date?]?
  def work_date_previously_was: () -> Date?
  def work_date_before_last_save: () -> Date?
  def work_date_change_to_be_saved: () -> Array[Date?]?
  def work_date_in_database: () -> Date?
  def saved_change_to_work_date: () -> Array[Date?]?
  def saved_change_to_work_date?: () -> bool
  def will_save_change_to_work_date?: () -> bool
  def restore_work_date!: () -> void
  def clear_work_date_change: () -> void

  attr_accessor started_at(): ActiveSupport::TimeWithZone
  def started_at_changed?: () -> bool
  def started_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def started_at_will_change!: () -> void
  def started_at_was: () -> ActiveSupport::TimeWithZone?
  def started_at_previously_changed?: () -> bool
  def started_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def started_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def started_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def started_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def started_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_started_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_started_at?: () -> bool
  def will_save_change_to_started_at?: () -> bool
  def restore_started_at!: () -> void
  def clear_started_at_change: () -> void

  attr_accessor created_at(): ActiveSupport::TimeWithZone
  def created_at_changed?: () -> bool
  def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def created_at_will_change!: () -> void
  def created_at_was: () -> ActiveSupport::TimeWithZone?
  def created_at_previously_changed?: () -> bool
  def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_created_at?: () -> bool
  def will_save_change_to_created_at?: () -> bool
  def restore_created_at!: () -> void
  def clear_created_at_change: () -> void

  attr_accessor updated_at(): ActiveSupport::TimeWithZone
  def updated_at_changed?: () -> bool
  def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def updated_at_will_change!: () -> void
  def updated_at_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_previously_changed?: () -> bool
  def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_updated_at?: () -> bool
  def will_save_change_to_updated_at?: () -> bool
  def restore_updated_at!: () -> void
  def clear_updated_at_change: () -> void

  def rests: () -> Rest::ActiveRecord_Associations_CollectionProxy
  def rests=: (Rest::ActiveRecord_Associations_CollectionProxy | Array[Rest]) -> (Rest::ActiveRecord_Associations_CollectionProxy | Array[Rest])
  def rest_ids: () -> Array[Integer]
  def rest_ids=: (Array[Integer]) -> Array[Integer]
  def clock_out: () -> ClockOut
  def clock_out=: (ClockOut?) -> ClockOut?
  def build_clock_out: (untyped) -> ClockOut
  def create_clock_out: (untyped) -> ClockOut
  def create_clock_out!: (untyped) -> ClockOut
  def reload_clock_out: () -> ClockOut?

  class ActiveRecord_Relation < ActiveRecord::Relation
    include _ActiveRecord_Relation[Attendance, Integer]
    include Enumerable[Attendance]
  end

  class ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  end
end
